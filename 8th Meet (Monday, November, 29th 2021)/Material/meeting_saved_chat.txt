14:47:10 From  Donny Avianto  to  Everyone:
	silahkan presensi terlebih dahulu		U2FsdGVkX18HbIGgLBN7sdLdIjqXPT7lLrgOhph9CdGv1aI3JtXydevRHQoq3B4S
14:47:49 From  Donny Avianto  to  Everyone:
	silahkan yg sudah presensi dan ingin solat ashar terlebih dahulu		kembali jam 15.10
14:47:58 From  Donny Avianto  to  Everyone:
	silahkan presensi terlebih dahulu		U2FsdGVkX18HbIGgLBN7sdLdIjqXPT7lLrgOhph9CdGv1aI3JtXydevRHQoq3B4S
15:18:46 From  5200411477 ROBI ARDIANSYAH  to  Everyone:
	Permisi pak, boleh minta share ulang kode presensinya?
15:19:36 From  Donny Avianto  to  Everyone:
	silahkan presensi terlebih dahulu		U2FsdGVkX18HbIGgLBN7sdLdIjqXPT7lLrgOhph9CdGv1aI3JtXydevRHQoq3B4S
15:49:29 From  Nur Wahid  to  Everyone:
	# Low Pass SPatial Domain Filtering	# to observe the blurring effect	import cv2	import numpy as np		# Read the image	img = cv2.imread('images/sample.png', 0)		# Obtain number of rows and columns of the image	m, n = img.shape	print("Image dimens", img.shape)		# Averaging filter(3, 3) mask	mask = np.ones([3, 3], dtype=int)	mask = mask / 9		# Convolve the 3X3 mask over the image	img_new = np.zeros([m, n])		for i in range(1, m-1):	    for j in range(1, n-1):	        temp = img[i-1, j-1]*mask[0, 0]+img[i-1, j]*mask[0, 1]+img[i-1, j + 1]*mask[0, 2] + \	            img[i, j-1]*mask[1, 0] + img[i, j]*mask[1, 1]+img[i, j+1]*mask[1, 2] + \	            img[i+1, j-1]*mask[2, 0]+img[i+1, j]*mask[2, 1]+img[i+1, j + 1]*mask[2, 2]		        img_new[i, j] = temp		img_new = img_new.astype(np.uint8)	m, n = img.shape	print("Image dimens", img_new.shape)		cv2.imwrite('result/sample_filter.jpg', img_new)
16:08:47 From  Nur Wahid  to  Everyone:
	# Median Spatial Domain Filtering		import cv2	import numpy as np		# Read the image	img_noisy1 = cv2.imread('images/sample.png', 0)		# Obtain the number of rows and columns of the image	m, n = img_noisy1.shape		# Traverse the image. For every 3X3 area,	# find the median of the pixels and	# replace the center pixel by the median	img_new1 = np.zeros([m, n])		for i in range(1, m-1):		for j in range(1, n-1):			temp = [img_noisy1[i-1, j-1], 				img_noisy1[i-1, j], 				img_noisy1[i-1, j + 1],				img_noisy1[i, j-1],				img_noisy1[i, j],				img_noisy1[i, j + 1],				img_noisy1[i + 1, j-1],				img_noisy1[i + 1, j],				img_noisy1[i + 1, j + 1]]						temp = sorted(temp)			img_new1[i, j]= temp[4]		img_new1 = img_new1.astype(np.uint8)	cv2.imwrite('result/new_median_filtered.png', img_new1)
16:12:10 From  Nur Wahid  to  Everyone:
	import cv2	from matplotlib import pyplot as plt		image = cv2.imread('images/sample.png') # reads the image	image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) # convert to HSV		figure_size = 9 # the dimension of the x and y axis of the kernal.	new_image = cv2.blur(image,(figure_size, figure_size))		plt.figure(figsize=(11,6))	plt.subplot(121), plt.imshow(cv2.cvtColor(image, cv2.COLOR_HSV2RGB)),plt.title('Original')	plt.xticks([]), plt.yticks([])		plt.subplot(122), plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_HSV2RGB)),plt.title('Mean filter')	plt.xticks([]), plt.yticks([])	plt.show()
16:18:00 From  Nur Wahid  to  Everyone:
	import cv2	from matplotlib import pyplot as plt		image = cv2.imread('images/lena.jpg') # reads the image	image2 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)	figure_size = 9	new_image = cv2.blur(image2,(figure_size, figure_size))		plt.figure(figsize=(11,6))	plt.subplot(121), plt.imshow(image2, cmap='gray'),plt.title('Original')	plt.xticks([]), plt.yticks([])	plt.subplot(122), plt.imshow(new_image, cmap='gray'),plt.title('Mean filter')	plt.xticks([]), plt.yticks([])	plt.show()
16:25:58 From  Nur Wahid  to  Everyone:
	import numpy as np	import cv2	from matplotlib import pyplot as plt		image = cv2.imread('images/lena.jpg') # reads the image	image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)	figure_size = 9	new_image = cv2.GaussianBlur(image, (figure_size, figure_size),0)		plt.figure(figsize=(11,6))	plt.subplot(121), plt.imshow(cv2.cvtColor(image, cv2.COLOR_HSV2RGB)),plt.title('Original')	plt.xticks([]), plt.yticks([])	plt.subplot(122), plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_HSV2RGB)),plt.title('Gaussian Filter')	plt.xticks([]), plt.yticks([])	plt.show()
16:26:40 From  Nur Wahid  to  Everyone:
	import cv2	from matplotlib import pyplot as plt		image = cv2.imread('images/lena.jpg')  # reads the image	image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)	figure_size = 9	new_image = cv2.medianBlur(image, figure_size)		plt.figure(figsize=(11, 6))	plt.subplot(121), plt.imshow(cv2.cvtColor(image, cv2.COLOR_HSV2RGB)),plt.title('Original')	plt.xticks([]), plt.yticks([])		plt.subplot(122), plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_HSV2RGB)),plt.title('Median Filter')	plt.xticks([]), plt.yticks([])	plt.show()
16:30:18 From  Nur Wahid  to  Everyone:
	import cv2	from matplotlib import pyplot as plt		image = cv2.imread('images/lena.jpg')  # reads the image	image2 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)	figure_size = 9	new_image = cv2.medianBlur(image2, figure_size)		plt.figure(figsize=(11, 6))	plt.subplot(121), plt.imshow(image2, cmap='gray'), plt.title('Original')	plt.xticks([]), plt.yticks([])		plt.subplot(122), plt.imshow(new_image, cmap='gray'), plt.title('Median Filter')	plt.xticks([]), plt.yticks([])	plt.show()
16:36:01 From  Nur Wahid  to  Everyone:
	image = [[[0, 114, 54],[0, 114, 54],[117, 76, 36],[117, 76, 36],[117, 76, 36],[117, 76, 36],[0, 114, 54],[0, 114, 54]],	         [[0, 114, 54],[117, 76, 36],[255, 199, 148],[255, 199, 148],[255, 199, 148],[255, 199, 148],[0, 114, 54],[0, 114, 54]],	         [[0, 114, 54],[117, 76, 36],[255, 199, 148],[109, 207, 246],[255, 199, 148],[109, 207, 246],[0, 114, 54],[0, 114, 54]],	         [[0, 114, 54],[255, 199, 148],[255, 199, 148],[255, 199, 148],[255, 199, 148],[255, 199, 148],[0, 114, 54],[0, 114, 54]],	         [[0, 114, 54],[247, 148, 29],[255, 199, 148],[255, 199, 148],[255, 199, 148],[247, 148, 29],[0, 114, 54],[0, 114, 54]],	         [[255, 199, 148],[0, 114, 54],[247, 148, 29],[247, 148, 29],[247, 148, 29],[0, 114, 54],[255, 199, 148],[0, 114, 54]],	         [[0, 114, 54],[0, 114, 54],[37, 37, 37],[37, 37, 37],[37, 37, 37],[0, 114, 54],[0, 114, 54],[0, 114, 54]],	         [[0, 114, 54],[0, 114, 54],[54, 54, 54],[0, 114, 54],[54, 54, 54],[0, 114, 54],[0, 114, 54],[0, 114, 54]]]
16:42:24 From  Nur Wahid  to  Everyone:
	import numpy as np	import cv2	from matplotlib import pyplot as plt		image = cv2.imread('images/lena.jpg') # reads the image	image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)	figure_size = 9	new_image = cv2.GaussianBlur(image, (figure_size, figure_size),0)		plt.figure(figsize=(11,6))	plt.subplot(121), plt.imshow(cv2.cvtColor(image, cv2.COLOR_HSV2RGB)),plt.title('Original')	plt.xticks([]), plt.yticks([])	plt.subplot(122), plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_HSV2RGB)),plt.title('Gaussian Filter')	plt.xticks([]), plt.yticks([])	plt.show()
16:48:45 From  Nur Wahid  to  Everyone:
	import cv2	from matplotlib import pyplot as plt		image = cv2.imread('images/lena.jpg') # reads the image	image2 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)	figure_size = 9	new_image_gauss = cv2.GaussianBlur(image2, (figure_size, figure_size),0)		plt.figure(figsize=(11,6))	plt.subplot(121), plt.imshow(image2, cmap='gray'),plt.title('Original')	plt.xticks([]), plt.yticks([])	plt.subplot(122), plt.imshow(new_image_gauss, cmap='gray'),plt.title('Gaussian Filter')	plt.xticks([]), plt.yticks([])	plt.show()
16:50:44 From  Nur Wahid  to  Everyone:
	# first a conservative filter for grayscale images will be defined.	def conservative_smoothing_gray(data, filter_size):	    temp = []	    indexer = filter_size // 2	    new_image = data.copy()	    nrow, ncol = data.shape	    for i in range(nrow):	        for j in range(ncol):	            for k in range(i-indexer, i+indexer+1):	                for m in range(j-indexer, j+indexer+1):	                    if (k > -1) and (k < nrow):	                        if (m > -1) and (m < ncol):	                            temp.append(data[k,m])	            temp.remove(data[i,j])	            max_value = max(temp)	            min_value = min(temp)	            if data[i,j] > max_value:	                new_image[i,j] = max_value	            elif data[i,j] < min_value:	                new_image[i,j] = min_value	            temp =[]	    return new_image.copy()
17:01:56 From  Nur Wahid  to  Everyone:
	import cv2	from matplotlib import pyplot as plt			image = cv2.imread('images/lena.jpg')  # reads the image	image2 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)	figure_size = 9	new_image = cv2.Laplacian(image2, cv2.CV_64F)		plt.figure(figsize=(11,6))	plt.subplot(131), plt.imshow(image2, cmap='gray'),plt.title('Original')	plt.xticks([]), plt.yticks([])	plt.subplot(132), plt.imshow(new_image, cmap='gray'),plt.title('Laplacian')	plt.xticks([]), plt.yticks([])	plt.subplot(133), plt.imshow(image2 + new_image, cmap='gray'),plt.title('Resulting image')	plt.xticks([]), plt.yticks([])	plt.show()
17:05:52 From  Nur Wahid  to  Everyone:
	image = cv2.imread('images/lena.jpg')  # reads the image	image2 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)	figure_size = 9	dft = cv2.dft(np.float32(image2),flags = cv2.DFT_COMPLEX_OUTPUT)		# shift the zero-frequncy component to the center of the spectrum	dft_shift = np.fft.fftshift(dft)		# save image of the image in the fourier domain.	magnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))		# plot both images	plt.figure(figsize=(11,6))	plt.subplot(121),plt.imshow(image2, cmap = 'gray')	plt.title('Input Image'), plt.xticks([]), plt.yticks([])	plt.subplot(122),plt.imshow(magnitude_spectrum, cmap = 'gray')	plt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])	plt.show()
17:06:01 From  Nur Wahid  to  Everyone:
	rows, cols = image2.shape	crow,ccol = rows//2 , cols//2		# create a mask first, center square is 1, remaining all zeros	mask = np.zeros((rows,cols,2),np.uint8)	mask[crow-30:crow+30, ccol-30:ccol+30] = 1		# apply mask and inverse DFT	fshift = dft_shift*mask	f_ishift = np.fft.ifftshift(fshift)	img_back = cv2.idft(f_ishift)	img_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])		# plot both images	plt.figure(figsize=(11,6))	plt.subplot(121),plt.imshow(image2, cmap = 'gray')	plt.title('Input Image'), plt.xticks([]), plt.yticks([])	plt.subplot(122),plt.imshow(img_back, cmap = 'gray')	plt.title('Low Pass Filter'), plt.xticks([]), plt.yticks([])	plt.show()
17:15:05 From  Nur Wahid  to  Everyone:
	import cv2	from matplotlib import pyplot as plt	from PIL import Image, ImageFilter			image = cv2.imread('images/lena.jpg')  # reads the image	image2 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)	image2 = Image.fromarray(image2.astype('uint8'))	new_image = image2.filter(ImageFilter.UnsharpMask(radius=2, percent=150))		plt.figure(figsize=(11,6))	plt.subplot(121),plt.imshow(image2, cmap = 'gray')	plt.title('Input Image'), plt.xticks([]), plt.yticks([])	plt.subplot(122),plt.imshow(new_image, cmap = 'gray')	plt.title('Unsharp Filter'), plt.xticks([]), plt.yticks([])	plt.show()
